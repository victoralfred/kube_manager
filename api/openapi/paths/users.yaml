users:
  get:
    tags:
      - users
    summary: List users
    description: Retrieve a paginated list of users
    operationId: listUsers
    parameters:
      - name: X-Tenant-ID
        in: header
        required: true
        schema:
          type: string
          format: uuid
        description: Tenant identifier
      - name: status
        in: query
        schema:
          type: string
          enum: [active, inactive, suspended, pending]
        description: Filter by user status
      - name: search
        in: query
        schema:
          type: string
        description: Search by name or email
      - name: limit
        in: query
        schema:
          type: integer
          minimum: 1
          maximum: 100
          default: 10
        description: Number of results per page
      - name: offset
        in: query
        schema:
          type: integer
          minimum: 0
          default: 0
        description: Number of items to skip
    responses:
      '200':
        description: List of users
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../schemas/common.yaml#/PaginatedResponse'
                - type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '../schemas/user.yaml#/User'
      '400':
        description: Bad request
        content:
          application/json:
            schema:
              $ref: '../schemas/common.yaml#/Error'
      '500':
        description: Internal server error
        content:
          application/json:
            schema:
              $ref: '../schemas/common.yaml#/Error'
  post:
    tags:
      - users
    summary: Create user
    description: Create a new user
    operationId: createUser
    parameters:
      - name: X-Tenant-ID
        in: header
        required: true
        schema:
          type: string
          format: uuid
        description: Tenant identifier
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../schemas/user.yaml#/CreateUserRequest'
    responses:
      '201':
        description: User created successfully
        content:
          application/json:
            schema:
              $ref: '../schemas/user.yaml#/User'
      '400':
        description: Bad request
        content:
          application/json:
            schema:
              $ref: '../schemas/common.yaml#/Error'
      '409':
        description: User already exists
        content:
          application/json:
            schema:
              $ref: '../schemas/common.yaml#/Error'
      '500':
        description: Internal server error
        content:
          application/json:
            schema:
              $ref: '../schemas/common.yaml#/Error'

users_id:
  get:
    tags:
      - users
    summary: Get user by ID
    description: Retrieve a user by their unique identifier
    operationId: getUser
    parameters:
      - name: X-Tenant-ID
        in: header
        required: true
        schema:
          type: string
          format: uuid
        description: Tenant identifier
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: User ID
    responses:
      '200':
        description: User details
        content:
          application/json:
            schema:
              $ref: '../schemas/user.yaml#/User'
      '404':
        description: User not found
        content:
          application/json:
            schema:
              $ref: '../schemas/common.yaml#/Error'
      '500':
        description: Internal server error
        content:
          application/json:
            schema:
              $ref: '../schemas/common.yaml#/Error'
  put:
    tags:
      - users
    summary: Update user
    description: Update user information
    operationId: updateUser
    parameters:
      - name: X-Tenant-ID
        in: header
        required: true
        schema:
          type: string
          format: uuid
        description: Tenant identifier
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: User ID
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../schemas/user.yaml#/UpdateUserRequest'
    responses:
      '200':
        description: User updated successfully
        content:
          application/json:
            schema:
              $ref: '../schemas/user.yaml#/User'
      '400':
        description: Bad request
        content:
          application/json:
            schema:
              $ref: '../schemas/common.yaml#/Error'
      '404':
        description: User not found
        content:
          application/json:
            schema:
              $ref: '../schemas/common.yaml#/Error'
      '500':
        description: Internal server error
        content:
          application/json:
            schema:
              $ref: '../schemas/common.yaml#/Error'
  delete:
    tags:
      - users
    summary: Delete user
    description: Soft delete a user
    operationId: deleteUser
    parameters:
      - name: X-Tenant-ID
        in: header
        required: true
        schema:
          type: string
          format: uuid
        description: Tenant identifier
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: User ID
    responses:
      '204':
        description: User deleted successfully
      '404':
        description: User not found
        content:
          application/json:
            schema:
              $ref: '../schemas/common.yaml#/Error'
      '500':
        description: Internal server error
        content:
          application/json:
            schema:
              $ref: '../schemas/common.yaml#/Error'

users_roles:
  get:
    tags:
      - users
    summary: Get user roles
    description: Retrieve roles assigned to a user
    operationId: getUserRoles
    parameters:
      - name: X-Tenant-ID
        in: header
        required: true
        schema:
          type: string
          format: uuid
        description: Tenant identifier
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: User ID
    responses:
      '200':
        description: User roles
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: uuid
                roles:
                  type: array
                  items:
                    $ref: '../schemas/rbac.yaml#/Role'
      '404':
        description: User not found
        content:
          application/json:
            schema:
              $ref: '../schemas/common.yaml#/Error'
      '500':
        description: Internal server error
        content:
          application/json:
            schema:
              $ref: '../schemas/common.yaml#/Error'
  post:
    tags:
      - users
    summary: Assign roles to user
    description: Assign one or more roles to a user
    operationId: assignRolesToUser
    parameters:
      - name: X-Tenant-ID
        in: header
        required: true
        schema:
          type: string
          format: uuid
        description: Tenant identifier
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: User ID
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../schemas/rbac.yaml#/AssignRoleRequest'
    responses:
      '200':
        description: Roles assigned successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Roles assigned successfully"
      '400':
        description: Bad request
        content:
          application/json:
            schema:
              $ref: '../schemas/common.yaml#/Error'
      '404':
        description: User not found
        content:
          application/json:
            schema:
              $ref: '../schemas/common.yaml#/Error'
      '500':
        description: Internal server error
        content:
          application/json:
            schema:
              $ref: '../schemas/common.yaml#/Error'

users_permissions:
  get:
    tags:
      - users
    summary: Get user permissions
    description: Retrieve all permissions for a user (combined from all roles)
    operationId: getUserPermissions
    parameters:
      - name: X-Tenant-ID
        in: header
        required: true
        schema:
          type: string
          format: uuid
        description: Tenant identifier
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: User ID
    responses:
      '200':
        description: User permissions
        content:
          application/json:
            schema:
              $ref: '../schemas/user.yaml#/UserPermissions'
      '404':
        description: User not found
        content:
          application/json:
            schema:
              $ref: '../schemas/common.yaml#/Error'
      '500':
        description: Internal server error
        content:
          application/json:
            schema:
              $ref: '../schemas/common.yaml#/Error'
